{"meta":{"title":"Zephaniah's Blog","subtitle":"","description":"","author":"Zephaniah","url":"http://yoursite.com","root":"/"},"pages":[{"title":"所有分类","date":"2020-07-16T12:19:58.840Z","updated":"2020-07-16T12:19:58.840Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-07-16T12:07:44.555Z","updated":"2020-07-16T12:07:44.555Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"下面写关于自己的内容"},{"title":"所有标签","date":"2020-07-16T12:19:53.544Z","updated":"2020-07-16T12:19:53.544Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"学习git的使用","slug":"学习git的使用","date":"2020-07-15T19:16:08.000Z","updated":"2020-07-16T19:04:51.949Z","comments":true,"path":"2020/07/16/学习git的使用/","link":"","permalink":"http://yoursite.com/2020/07/16/%E5%AD%A6%E4%B9%A0git%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"","text":"git的本地工作流程)git init 初始化仓库，让git知道它要管理这个仓库，生成隐藏文件.gitgit status 查看当前状态（工作区、缓存区、Git Repository本地仓库）git add 添加到缓存区git commit -m &quot;提交说明/描述&quot; 提交到本地仓库 git的版本回退操作（时光穿梭机）git log 查看操作日志（显示作者、编号、当前版本、提交日期、提交注释）git log --pretty=oneline 查看操作日志（只显示编号、当前版本、提交注释）git reset --hard 提交编号 回溯到该编号的版本git reflog 由于git log只能看到当前以及之前的编号，所以要用到这个才能看到当前之后的编号，便于回溯到了之前又想回溯到之后的版本mkdir 文件夹名 创建文件夹cd 文件地址 进入文件夹注意：编号可以不写全，但最好要写4位以上，避免以后编号多了会重复。 基于https协议的github远程仓库的使用在github创建了一个新的仓库之后可以看到地址（默认是https协议）：git clone 线上仓库地址 克隆线上仓库到本地git push 修改完代码之后提交到本地仓库之后就使用该指令提交到线上仓库，但是要先在.git/config文件的url的//后面加上github的用户名:密码@，不然会提示权限不足（每天下班的最后一件事要git push）git pull 拉取线上仓库最新版本（每天上班的时候第一件事要git pull） 基于ssh协议（推荐用这个）基于ssh协议与https相比，只是影响github对于用户的身份鉴权方式，其他操作一模一样点击Use SSH可以切换到ssh协议：生成公私钥对指令（需先自行安装OpenSSH）：ssh-keygen -t rsa -C &quot;注册邮箱&quot;（输入完这行代码之后一直回车就行了，然后他会显示公钥和私钥在哪个文件，自己去找到填在github上就行了）步骤:1.生成客户端公私钥文件2.将公钥上传到Github完了之后就可以克隆到本地啊，添加缓存区啊，提交本地仓库啊等等操作 分支管理)分支相关指令：查看分支：git branch创建分支：git branch 分支名切换分支：git checkout 分支名删除分支：git branch -d 分支名注意：在删除分支的时候，一定要先退出要删除的分支，不然是删除不掉的。合并分支：git merge 被合并的分支名 冲突的产生与解决产生：在下班我git push之后，有同事修改了代码，然后我第二天上班没有git pull，而是直接修改代码，然后下班的时候git push就会产生冲突。解决：先git pull，然后系统会自动把线上仓库和本地仓库的冲突合并，然后我们需要和之前修改代码的同事商量该如何删除或保留这个合并之后的代码。最后商量好了就可以git add 、git commit -m 、git push了 Git实用技能1、图形管理工具①Github for Desktop②source tree)③TortoiseGit④装好git自带的，在非仓库的地方右键Git GUI Here 忽略文件创建.gitignore文件：写在.gitignore文件里：1./mtk/ 过滤整个mtk文件夹2.*.zip 过滤所有.zip文件3./mtk/do.c 过滤mtk文件夹下do.c文件4.!index.php 不过滤index.php文件在文件中以#开头的都是注释 该文章是我在b站学习的笔记，视频地址：https://www.bilibili.com/video/BV1sJ411D7xN?p=1","categories":[{"name":"git","slug":"git","permalink":"http://yoursite.com/categories/git/"},{"name":"github","slug":"github","permalink":"http://yoursite.com/categories/github/"}],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-07-15T17:51:43.529Z","updated":"2020-07-16T10:22:46.182Z","comments":true,"path":"2020/07/16/hello-world/","link":"","permalink":"http://yoursite.com/2020/07/16/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"git","slug":"git","permalink":"http://yoursite.com/categories/git/"},{"name":"github","slug":"github","permalink":"http://yoursite.com/categories/github/"}],"tags":[]}